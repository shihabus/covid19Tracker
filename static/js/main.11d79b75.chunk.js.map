{"version":3,"sources":["containers/App/Banner.js","components/Background.js","components/StateCard.js","components/Footer.js","components/Loader.js","components/FullPageOverlay.js","containers/App/FetchData.js","containers/StateResult/DistrictWise.js","containers/StateResult/index.js","containers/Summary/index.js","containers/App/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Banner","role","aria-label","style","paddingLeft","Background","props","children","State","Label","StateName","SecondaryData","gridName","CountText","StateCard","active","confirmed","deaths","recovered","state","onStateSelection","onClick","districtData","Divider","hr","Footer","color","href","target","rel","Loader","slogan","defaultProps","modalRoot","document","getElementById","Modal","el","createElement","appendChild","this","removeChild","ReactDOM","createPortal","React","PureComponent","FullpageOverlay","fetchData","url","a","fetch","resp","json","data","Nav","Content","Card","District","Counts","span","TextBlock","DistrictWise","dataSet","onBackClicked","districts","Object","keys","map","district","Index","useState","selectedState","setSelectedState","console","log","item","Count","Section","LastUpdated","lastupdatedtime","loadData","data1","data2","stateWise","_","get","merged","x","setStateWiseData","useEffect","stateWiseData","slice","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11d79b75.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  grid-area: banner;\n  background: #26070a;\n  padding: 0.5rem 1rem;\n  box-shadow: 0px 0px 36px 0px rgba(0, 0, 0, 0.75);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 4px;\n  color: #7c92a6;\n  font-size: 1.25rem;\n  @media only screen and (min-width: 768px) {\n    font-size: 2rem;\n  }\n`;\n\nexport default function Banner() {\n  return (\n    <Wrapper>\n      <div>\n        CORONA TRACKER\n        <span role=\"img\" aria-label=\"flag\" style={{ paddingLeft: \".5rem\" }}>\n          ðŸ‡®ðŸ‡³\n        </span>\n      </div>\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  height: 100%;\n  background: #591212;\n  // background: -webkit-linear-gradient(to right, #2c5364, #203a43, #0f2027);\n  // background: linear-gradient(to right, #2c5364, #203a43, #0f2027);\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 50px 1fr 1fr 2rem;\n  grid-gap: 0.5rem;\n  grid-template-areas: \"banner\" \"content-1\" \"content-2\" \"footer\";\n  overflow: hidden;\n\n  @media only screen and (min-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 100px calc(100% - 160px) 2rem;\n    grid-gap: 10px;\n    padding-bottom: 2rem;\n    grid-template-areas: \"banner banner\" \"content-1 content-2\" \"content-1 footer\";\n  }\n`;\n\nexport default function Background(props) {\n  return <Wrapper>{props.children}</Wrapper>;\n}\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  background: #bf2626;\n  border-radius: 4px;\n  width: 20rem;\n  height: 10rem;\n  margin: 0.5rem 1rem;\n  display: grid;\n  color: #e1e1e1;\n  grid-template-column: 1fr 1fr;\n  gird-template-rows: 1fr 1.5rem 1.5rem;\n  padding: 0.625rem 0.5rem;\n  grid-gap: 0.1rem;\n  cursor: pointer;\n  transition: transform 0.2s;\n  grid-template-areas:\n    \"state state\"\n    \"active confirmed\" \"recovered deaths\";\n\n  :hover {\n    background: #bf2a37;\n    box-shadow: 0px 0px 36px 0px rgba(0, 0, 0, 0.65);\n    transform: scale(1.025);\n    z-index: 2;\n  }\n\n  @media only screen and (min-width: 768px) {\n    margin: 1rem;\n    width: 20rem;\n    height: 12.5rem;\n    margin: 1rem;\n    display: grid;\n    color: #e1e1e1;\n    grid-template-column: 1fr 1fr;\n    gird-template-rows: 1fr 2.5rem 2.5rem;\n    padding: 1rem;\n    grid-gap: 0.5rem;\n  }\n`;\n\nconst State = styled.div`\n  grid-area: state;\n  flex-direction: column;\n  display: flex;\n  align-items: flex-start;\n  overflow: hidden;\n`;\n\nconst Label = styled.div`\n  display: flex;\n  font-size: 0.875rem;\n  color: #bdc3c7;\n  @media only screen and (min-width: 768px) {\n    font-size: 1rem;\n  }\n`;\n\nconst StateName = styled.div`\n  font-size: 1rem;\n  width: calc(100% - 0.5rem);\n  @media only screen and (min-width: 768px) {\n    font-size: 1.5rem;\n    width: calc(100% - 0.5rem);\n  }\n`;\n\nconst SecondaryData = styled.div`\n  grid-area: ${props => props.gridName};\n  flex-direction: column;\n  display: flex;\n  align-items: flex-start;\n  overflow: hidden;\n`;\n\nconst CountText = styled.div`\n  font-size: 1.5rem;\n  @media only screen and (min-width: 768px) {\n    font-size: 1.75rem;\n  }\n`;\n\nexport default function StateCard(props) {\n  const {\n    active,\n    confirmed,\n    deaths,\n    recovered,\n    state,\n    onStateSelection\n  } = props;\n  return (\n    <Wrapper onClick={() => props.districtData && onStateSelection(props)}>\n      <State>\n        <Label>State</Label>\n        <StateName>{state}</StateName>\n      </State>\n      <SecondaryData gridName=\"active\">\n        <Label>Active</Label>\n        <CountText>{active}</CountText>\n      </SecondaryData>\n      <SecondaryData gridName=\"confirmed\">\n        <Label>\n          Confirmed{\" \"}\n          {props.districtData && (\n            <div style={{ paddingLeft: \".5rem\" }}>\n              {props.districtData && (\n                <span role=\"img\" aria-label=\"more\">\n                  ðŸ‘‰\n                </span>\n              )}\n            </div>\n          )}\n        </Label>\n        <CountText>{confirmed}</CountText>\n      </SecondaryData>\n      <SecondaryData gridName=\"recovered\">\n        <Label>Recovered</Label>\n        <CountText>{recovered}</CountText>\n      </SecondaryData>\n      <SecondaryData gridName=\"deaths\">\n        <Label>Deaths</Label>\n        <CountText>{deaths}</CountText>\n      </SecondaryData>\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  grid-area: footer;\n  color: white;\n  text-align: center;\n  padding-bottom: 0.5rem;\n  @media only screen and (min-width: 768px) {\n    font-size: 0.75rem;\n  }\n`;\n\nconst Divider = styled.hr`\n  width: 50%;\n  border-width: 0.25px;\n`;\nexport default function Footer() {\n  return (\n    <Wrapper>\n      <Divider />\n      Courtesy @\n      <a\n        style={{ color: \"white\", paddingLeft: \"0.2rem\" }}\n        href=\"https://api.covid19india.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Covid19 India Org.\n      </a>{\" \"}\n      |\n      <a\n        style={{ color: \"white\", paddingLeft: \"0.2rem\" }}\n        href=\"https://github.com/shihabus\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        GitHub\n      </a>\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  grid-area: ${props => props.gridName};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  font-size: 1rem;\n`;\n\nexport default function Loader(props) {\n  const { gridName, slogan } = props;\n  return <Wrapper gridName={gridName}>{slogan}</Wrapper>;\n}\n\nLoader.defaultProps = {\n  slogan: \"Loading...\"\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\n// I use the same div here that I mount my app into\n// so the modal will be a sibling of the rest of the app\n// in the DOM hierachy\nconst modalRoot = document.getElementById(\"root\");\n\nclass Modal extends React.PureComponent {\n  static propTypes = {\n    children: PropTypes.node\n  };\n\n  constructor(props) {\n    super(props);\n    this.el = document.createElement(\"div\");\n  }\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  left: 0;\n  top: 0;\n  background-color: rgba(255, 255, 255, 0.9);\n  height: 100vh;\n  width: 100vw;\n  z-index: 999;\n  color: white;\n`;\n\nexport default function FullpageOverlay(props) {\n  return (\n    <Modal>\n      <Wrapper>{props.children}</Wrapper>\n    </Modal>\n  );\n}\n","const fetchData = async url => {\n  const resp = await fetch(url);\n  const data = await resp.json();\n  return data;\n};\n\nexport default fetchData;\n// \"https://api.covid19india.org/data.json\";\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from \"react\";\nimport { FullPageOverLay } from \"../../components\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 4rem calc(100% - 5rem);\n  grid-template-areas: \"nav\" \"content\";\n  height: 100%;\n  width: 100%;\n`;\n\nconst Nav = styled.div`\n  grid-area: nav;\n  font-size: 1.5rem;\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  grid-area: content;\n  overflow: auto;\n\n  @media only screen and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    align-items: start;\n  }\n\n  @media only screen and (min-width: 1024px) {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    align-items: start;\n  }\n`;\n\nconst Card = styled.div`\n  background: black;\n  border-radius: 4px;\n  margin: 1rem;\n  padding: 1rem;\n  display: grid;\n  grid-template-rows: 2rem 1fr;\n  grid-template-areas: \"district\" \"counts\";\n  height: 6rem;\n\n  :hover {\n    box-shadow: 0px 0px 36px 0px rgba(0, 0, 0, 0.65);\n    transform: scale(1.025);\n    z-index: 2;\n  }\n`;\n\nconst District = styled.div`\n  grid-area: district;\n  font-size: 1.25rem;\n`;\n\nconst Counts = styled.div`\n  grid-area: counts;\n  display: grid;\n  grid-template-rows: repeat(2, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n`;\n\nconst CountText = styled.span`\n  font-size: 1.5rem;\n  padding-left: 0.2rem;\n`;\n\nconst TextBlock = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 0.75rem;\n`;\n\nexport default function DistrictWise(props) {\n  const { dataSet, onBackClicked } = props;\n  let districts = Object.keys(dataSet.districtData);\n  return (\n    <FullPageOverLay>\n      <Wrapper>\n        <Nav onClick={() => onBackClicked()}> ðŸ”™</Nav>\n        <Content>\n          {districts.map(district => {\n            const {\n              active,\n              confirmed,\n              deaths,\n              recovered\n            } = dataSet.districtData[district];\n            return (\n              <Card>\n                <District>{district}</District>\n                <Counts>\n                  <TextBlock>\n                    Active <CountText>{active}</CountText>\n                  </TextBlock>\n                  <TextBlock>\n                    Confirmed <CountText>{confirmed}</CountText>\n                  </TextBlock>\n                  <TextBlock>\n                    Deaths <CountText>{deaths}</CountText>\n                  </TextBlock>\n                  <TextBlock>\n                    Recovered <CountText>{recovered}</CountText>\n                  </TextBlock>\n                </Counts>\n              </Card>\n            );\n          })}\n        </Content>\n      </Wrapper>\n    </FullPageOverLay>\n  );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { StateCard } from \"../../components\";\nimport DistrictWise from \"./DistrictWise\";\n\nconst Wrapper = styled.div`\n  grid-area: content-1;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: center;\n  overflow: auto;\n  ::-webkit-scrollbar {\n    width: 0px;\n    background: transparent;\n  }\n  @media only screen and (min-width: 768px) {\n    justify-content: flex-start;\n  }\n`;\n\nexport default function Index(props) {\n  const { dataSet } = props;\n  const [selectedState, setSelectedState] = useState(null);\n\n  console.log(\"selectedState\", selectedState);\n\n  return (\n    <Wrapper>\n      {dataSet.map(item => (\n        <StateCard\n          {...item}\n          onStateSelection={state => setSelectedState(state)}\n        />\n      ))}\n      {selectedState && (\n        <DistrictWise\n          dataSet={selectedState}\n          onBackClicked={() => setSelectedState(null)}\n        />\n      )}\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  grid-area: content-2;\n  height: 100%;\n  margin: 0.5rem 1rem;\n  padding-bottom: 0.5rem;\n  color: #7c92a6;\n\n  display: grid;\n  grid-template-rows: repeat(2, 1fr) 2rem;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-areas: \"active confirmed\" \"deaths recovered\" \"last-updated last-updated\";\n\n  @media only screen and (min-width: 768px) {\n    display: grid;\n    grid-template-rows: repeat(2, 1fr) 5rem;\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-areas: \"active confirmed\" \"deaths recovered\" \"last-updated last-updated\";\n  }\n`;\n\nconst Label = styled.div`\n  font-size: 0.75rem;\n  @media only screen and (min-width: 768px) {\n    font-size: 1.5rem;\n  }\n`;\n\nconst Count = styled.div`\n  font-size: 1.5rem;\n  color: white;\n  @media only screen and (min-width: 768px) {\n    font-size: 5rem;\n  }\n`;\n\nconst Section = styled.div`\n  grid-area: ${props => props.gridName};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst LastUpdated = styled(Section)`\n  @media only screen and (min-width: 768px) {\n    flex-direction: row;\n    font-size: 1rem;\n  }\n`;\nexport default function Index(props) {\n  const {\n    active,\n    confirmed,\n    deaths,\n    recovered,\n    lastupdatedtime\n  } = props.dataSet;\n  return (\n    <Wrapper>\n      <Section gridName=\"active\">\n        <Label>Total active</Label>\n        <Count>{active}</Count>\n      </Section>\n      <Section gridName=\"confirmed\">\n        <Label>Total confirmed</Label>\n        <Count>{confirmed}</Count>\n      </Section>\n      <Section gridName=\"deaths\">\n        <Label>Total deaths</Label>\n        <Count>{deaths}</Count>\n      </Section>\n      <Section gridName=\"recovered\">\n        <Label>Total recovered</Label>\n        <Count>{recovered}</Count>\n      </Section>\n      <LastUpdated gridName=\"last-updated\">\n        Last updated on :\n        <span style={{ color: \"white\" }}>\n          <b> {lastupdatedtime}</b>\n        </span>\n      </LastUpdated>\n    </Wrapper>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Banner from \"./Banner\";\nimport { Background, Footer, Loader } from \"../../components\";\nimport fetchData from \"./FetchData\";\nimport ScrollableCards from \"../StateResult\";\nimport Summary from \"../Summary\";\nimport _ from \"lodash\";\n\nexport default function Index() {\n  useEffect(() => {\n    loadData();\n    return () => {\n      loadData();\n    };\n  }, []);\n\n  async function loadData() {\n    const data1 = await fetchData(\"https://api.covid19india.org/data.json\");\n    const data2 = await fetchData(\n      \"https://api.covid19india.org/state_district_wise.json\"\n    );\n\n    const stateWise = _.get(data1, \"statewise\", null);\n    if (stateWise) {\n      const merged = stateWise.map(x => ({ ...x, ...data2[x.state] }));\n      setStateWiseData(merged);\n    }\n  }\n\n  const [stateWiseData, setStateWiseData] = useState(null);\n\n  return (\n    <Background>\n      <Banner />\n      {stateWiseData ? (\n        <ScrollableCards dataSet={stateWiseData.slice(1)} />\n      ) : (\n        <Loader gridName=\"content-1\" slogan=\"#StayHomeStaySafe\" />\n      )}\n      {stateWiseData ? (\n        <Summary dataSet={stateWiseData[0]} />\n      ) : (\n        <Loader gridName=\"content-2\" slogan=\"#GoCoronaGo\" />\n      )}\n      <Footer />\n    </Background>\n  );\n}\n","import React from \"react\";\nimport App from \"./containers/App\";\nimport \"./App.css\";\n\nfunction Index() {\n  return <App />;\n}\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}